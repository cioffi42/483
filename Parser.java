import java.io.FileReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;


public class Parser {
    
    private static final String EDGES_FILENAME = "relationships.csv";
    
    // Given a String "Speed,0.6,1,Velocity", this returns a 
    // String array {"Speed", "0.6", "1", "Velocity"}
    // This method handles the special CSV rules for commas and quotes
    private static String[] splitRow(String csvRow){
        ArrayList<String> list = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        boolean isSpecial = false;  // we call an entry "special" if it has a ',' or '"' in it
        for (int i=0; i<csvRow.length(); i++){
            char ch = csvRow.charAt(i);
            if (ch == ','){
                if (isSpecial){
                    // This comma is an actual comma in the Excel file, treat it normally
                    sb.append(',');
                } else {
                    // This comma marks the end of an entry
                    list.add(sb.toString());
                    sb = new StringBuilder();
                    isSpecial = false;
                }
            } else if (ch == '"'){
                if (isSpecial){
                    if (i+1 < csvRow.length() && csvRow.charAt(i+1) == '"'){
                        // We have TWO quotation marks in a row, which indicates ONE actual quotation mark in the Excel file
                        sb.append('"');
                        i++;
                    } else {
                        // We have ONE quotation mark, generated by Excel to indicate the end of a "special" entry
                        isSpecial = false;
                    }
                } else {
                    // This quotation mark was generated by Excel to mark a "special" entry
                    isSpecial = true;
                }
            } else {
                sb.append(ch);
            }
        }
        // Add the last entry, and create a String[] to return
        list.add(sb.toString());
        String[] entries = new String[list.size()];
        for (int i=0; i<entries.length; i++){
            entries[i] = list.get(i);
        }
        return entries;
    }
    
	public static void parse(){
		
		ArrayList<Node> nodes = new ArrayList<Node>();
		ArrayList<Edge> edges = new ArrayList<Edge>();
		
		try {
			Scanner sc = new Scanner(new FileReader(EDGES_FILENAME));
			sc.nextLine(); // skip first line
			while (sc.hasNextLine()){
				String line = sc.nextLine();
				String[] entries = splitRow(line);
				entries[0] = Text.applyUnicodeCharacters(entries[0]);
				entries[3] = Text.applyUnicodeCharacters(entries[3]);
				Node nodeA = search(nodes, entries[0]);
				if (nodeA == null){
					nodeA = new Node("", entries[0], "");
					nodes.add(nodeA);
				}
				Node nodeB = search(nodes, entries[3]);
				if (nodeB == null){
					nodeB = new Node("", entries[3], "");
					nodes.add(nodeB);
				}
				edges.add(new Edge(Double.parseDouble(entries[2]), Double.parseDouble(entries[1]), nodeA, nodeB));
			}
			
			MainApplet.nodes = new Node[nodes.size()];
			for (int i=0; i<MainApplet.nodes.length; i++){
				MainApplet.nodes[i] = nodes.get(i);
			}
			MainApplet.edges = new Edge[edges.size()];
			for (int i=0; i<MainApplet.edges.length; i++){
				MainApplet.edges[i] = edges.get(i);
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	
	public static Node search(ArrayList<Node> list, String name){
		Iterator<Node> it = list.iterator();
		while (it.hasNext()){
			Node node = it.next();
			if (node.getName().compareTo(name) == 0){
				return node;
			}
		}
		return null;
	}
}
